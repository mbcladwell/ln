/* Plate Manager
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
   

    // Apply the application plugin to add support for building an application
    id 'application'
}

 configurations {
        extraLibs
    }
// Define the main class for the application
mainClassName = 'ln.Session'
version = '0.1'



dependencies {
    // This dependency is found on compile classpath of this component and consumers.
  //  compile 'com.google.guava:guava:23.0'
   // extraLibs group: 'com.google.guava', name: 'guava', version: '23.0'

    extraLibs group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    configurations.compile.extendsFrom(configurations.extraLibs)
    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    //compile files("objectdb-2.7.5/bin/converter.jar")

    // PostgreSQL:
    compile(group: 'org.postgresql', name: 'postgresql', version: '42.2.5')
    implementation(group: 'org.postgresql', name: 'postgresql', version: '42.2.5')
    //Help system
//	compile 'javax.help:javahelp:2.0.05'
//	implementation 'javax.help:javahelp:2.0.05'
    compile 'javax.swing:jlfgr:1.0'
    implementation 'javax.swing:jlfgr:1.0'
    extraLibs group: 'javax.swing', name: 'jlfgr', version: '1.0'

    // https://mvnrepository.com/artifact/org.apache.poi/poi
    //Apache project to access Office files
    compile 'org.apache:poi:4.0.1'
    implementation 'org.apache:poi:4.0.1'
    extraLibs group: 'org.apache', name: 'poi', version: '4.0.1'
    compile 'org.apache:poi-ooxml:4.0.1'
    implementation 'org.apache:poi-ooxml:4.0.1'
    extraLibs group: 'org.apache', name: 'poi-ooxml', version: '4.0.1'
    compile 'org.apache.xmlbeans:xmlbeans:2.6.0'
    implementation 'org.apache.xmlbeans:xmlbeans:2.6.0'
    extraLibs group: 'org.apache.xmlbeans', name: 'xmlbeans', version: '2.6.0'
    compile  'org.apache.commons:commons-collections4:4.2'
    implementation 'org.apache.commons:commons-collections4:4.2'
    extraLibs group: 'org.apache.commons', name: 'commons-collections4', version: '4.2'
    compile  'org.apache.commons:commons-compress:1.18'
    implementation  'org.apache.commons:commons-compress:1.18'
    extraLibs group: 'org.apache.commons', name: 'commons-compress', version: '1.18'

// https://mvnrepository.com/artifact/org.apache.poi/ooxml-schemas
    compile  'org.apache.poi:ooxml-schemas:1.4'
    implementation   'org.apache.poi:ooxml-schemas:1.4'
    extraLibs group: 'org.apache.poi', name: 'ooxml-schemas', version: '1.4'


//    compile 'javax.swing:jnlp:1.0'
//    implementation 'javax.swing:jnlp:1.0'
    
//JSON parsing
    //compile 'com.google.code.gson:gson:2.8.5'
	
}



// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
    mavenCentral()


}


task showMeCache doLast{
  configurations.compile.each { println it }
}


task runMain(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'ln.Session'
}

// note the Class-Path entry is to add ohter jars to classpath
jar {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Title': 'LIMS*Nucleus',
                'Implementation-Version': version,
            'provider': 'gradle'
	   
        )
    }
    
    from {
    	configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
      }
    
}



task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
}


task copyJavaDocsToWeb(type: Copy, dependsOn: [myJavadocs]) {
   // from configurations.runtime
    from("build/docs/.")
    into("/home/mbc/syncd/labsolns/public")
    include('*.html', '*.js', '*.js')
    include('javadoc/**')
    
}


task getSchema(type: JavaExec) {
    main = "-jar";
    args "/home/mbc/temp/schemaspy/schemaspy-6.1.0-SNAPSHOT.jar","-configFile", "/home/mbc/temp/schemaspy/schemaspy.properties","-dp","/home/mbc/temp/schemaspy/postgresql-42.2.5.jar"
 }

task copySchemaDocsToWeb(type: Copy, dependsOn: [getSchema]) {
   // from configurations.runtime
 new File('/home/mbc/syncd/labsolns/public/schema').mkdirs()
    from("./output")
   // include('*.html', '*.js', '*.css','*.png','*.txt','*.xml')
    into("/home/mbc/syncd/labsolns/public/schema")
    
    
}

task makeHelp(type: Copy, dependsOn: [copyJavaDocsToWeb, copySchemaDocsToWeb]){
    
}


task getDeps(type: Exec) {
    configurations.testRuntime.files
    commandLine 'echo', 'Downloaded all dependencies'
}

//update the local Maven repository
task updateMaven(type: Exec)  {

    executable "mvn"
	args "install:install-file", "-Dfile=/home/mbc/Downloads/postgresql-42.2.5.jar", "-DgroupId=org.postgresql", "-DartifactId=postgresql", "-Dversion=42.2.5", "-Dpackaging=jar"
    
//	args "install:install-file", "-Dfile=/home/mbc/Downloads/poi-bin-4.0.1-20181203/poi-4.0.1/poi-ooxml-4.0.1.jar", "-DgroupId=org.apache", "-DartifactId=poi-ooxml", "-Dversion=4.0.1", "-Dpackaging=jar"

//	args "install:install-file", "-Dfile=build/libs/pm-0.1.jar", "-DgroupId=net.stihie", "-DartifactId=pm", "-Dversion=0.1", "-Dpackaging=jar"

    
}



task prep {
    doLast{

	exec{
	    commandLine 'git', 'pull'
	}
	exec{
	    workingDir '../postgres'
	    commandLine 'git', 'pull'
	    
	}
	exec{
	   workingDir '/home/mbc'
	//    commandLine 'gnome-terminal psql -U pm_admin -h 192.168.1.7 -d pmdb'
	    commandLine 'gnome-terminal', '--command=/usr/bin/psql -U ln_admin -h 192.168.1.11 -d lndb'
	}
	//exec{
	  // workingDir '/home/mbc'
	   // commandLine 'psql','-Upm_admin', '-h192.168.1.7', '-dpmdb'
	//}
	exec{
	    commandLine 'gnome-terminal','--command=emacs'
	}
   
    }
    
}

task copyDependencies(type: Copy) {
   from configurations.compile   
   into 'webstart/dependencies'
}


task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    baseName = 'ln-uber'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

/////////////////////////////////////////////////////////////
//Run makeUberJar to create the Uber jar


task jarForWebStart() {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Title': 'LIMS*Nucleus',
                'Implementation-Version': version,
            'provider': 'gradle'
	   
        )
    }
    
    
}


task copyWebStartJar(type: Copy, dependsOn: [jarForWebStart]) {
    
//    from configurations.runtime
    from("build/libs")
    into("webstart/libs")
    include('*.jar')
    
}



task signAll(dependsOn: [copyWebStartJar]) {
    doLast{
    new File('webstart/signed').mkdirs()
    def libFiles = files { file('webstart/libs').listFiles() }
    libFiles.each {
        ant.signjar(
                destDir: 'webstart/signed',
                alias: 'info@labsolns.com',
                jar: it,
                keystore: 'webstart/keystore/JWSKeystore',
                storepass: 'fjdksiop1',
                keypass: 'fjdksiop1',
                preservelastmodified: 'false')
    }
    }	
}


task prepWebStart(type: Copy, dependsOn: [signAll]) {
   // from configurations.runtime
// new File('/home/mbc/syncd/labsolns/public/schema').mkdirs()
    from("webstart/signed")
   // include('*.html', '*.js', '*.css','*.png','*.txt','*.xml')
    into("/home/mbc/syncd/labsolns/source/_posts/webstart")
    
    
}

